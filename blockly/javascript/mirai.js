// Do not edit this file; automatically generated by gulp.
/* eslint-disable */
; (function(root, factory) {
  if (typeof define === 'function' && define.amd) { // AMD
    define(['./blockly_compressed.js'], factory);
  } else if (typeof exports === 'object') { // Node.js
    module.exports = factory(require('./blockly_compressed.js'));
  } else { // Browser
    root.Blockly.Mirai = factory(root.Blockly);
  }
} (this,
function(Blockly) {
  'use strict';
  Blockly.Mirai = new Blockly.Generator("Mirai");
  Blockly.Mirai.addReservedWords("break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,void,if,import,in,instanceof,new,return,super,switch,this,throw,try,typeof,var,void,while,with,yield,enum,implements,interface,let,package,private,protected,public,static,await,null,true,false,arguments," + Object.getOwnPropertyNames(Blockly.utils.global).join(","));
  // 四个空格缩进
  Blockly.Mirai.INDENT = "    ";
  Blockly.Mirai.ORDER_ATOMIC = 0;
  Blockly.Mirai.ORDER_NEW = 1.1;
  Blockly.Mirai.ORDER_MEMBER = 1.2;
  Blockly.Mirai.ORDER_FUNCTION_CALL = 2;
  Blockly.Mirai.ORDER_INCREMENT = 3;
  Blockly.Mirai.ORDER_DECREMENT = 3;
  Blockly.Mirai.ORDER_BITWISE_NOT = 4.1;
  Blockly.Mirai.ORDER_UNARY_PLUS = 4.2;
  Blockly.Mirai.ORDER_UNARY_NEGATION = 4.3;
  Blockly.Mirai.ORDER_LOGICAL_NOT = 4.4;
  Blockly.Mirai.ORDER_TYPEOF = 4.5;
  Blockly.Mirai.ORDER_VOID = 4.6;
  Blockly.Mirai.ORDER_DELETE = 4.7;
  Blockly.Mirai.ORDER_AWAIT = 4.8;
  Blockly.Mirai.ORDER_EXPONENTIATION = 5;
  Blockly.Mirai.ORDER_MULTIPLICATION = 5.1;
  Blockly.Mirai.ORDER_DIVISION = 5.2;
  Blockly.Mirai.ORDER_MODULUS = 5.3;
  Blockly.Mirai.ORDER_SUBTRACTION = 6.1;
  Blockly.Mirai.ORDER_ADDITION = 6.2;
  Blockly.Mirai.ORDER_BITWISE_SHIFT = 7;
  Blockly.Mirai.ORDER_RELATIONAL = 8;
  Blockly.Mirai.ORDER_IN = 8;
  Blockly.Mirai.ORDER_INSTANCEOF = 8;
  Blockly.Mirai.ORDER_EQUALITY = 9;
  Blockly.Mirai.ORDER_BITWISE_AND = 10;
  Blockly.Mirai.ORDER_BITWISE_XOR = 11;
  Blockly.Mirai.ORDER_BITWISE_OR = 12;
  Blockly.Mirai.ORDER_LOGICAL_AND = 13;
  Blockly.Mirai.ORDER_LOGICAL_OR = 14;
  Blockly.Mirai.ORDER_CONDITIONAL = 15;
  Blockly.Mirai.ORDER_ASSIGNMENT = 16;
  Blockly.Mirai.ORDER_YIELD = 17;
  Blockly.Mirai.ORDER_COMMA = 18;
  Blockly.Mirai.ORDER_NONE = 99;
  Blockly.Mirai.ORDER_OVERRIDES = [[Blockly.Mirai.ORDER_FUNCTION_CALL, Blockly.Mirai.ORDER_MEMBER], [Blockly.Mirai.ORDER_FUNCTION_CALL, Blockly.Mirai.ORDER_FUNCTION_CALL], [Blockly.Mirai.ORDER_MEMBER, Blockly.Mirai.ORDER_MEMBER], [Blockly.Mirai.ORDER_MEMBER, Blockly.Mirai.ORDER_FUNCTION_CALL], [Blockly.Mirai.ORDER_LOGICAL_NOT, Blockly.Mirai.ORDER_LOGICAL_NOT], [Blockly.Mirai.ORDER_MULTIPLICATION, Blockly.Mirai.ORDER_MULTIPLICATION], [Blockly.Mirai.ORDER_ADDITION, Blockly.Mirai.ORDER_ADDITION], [Blockly.Mirai.ORDER_LOGICAL_AND, Blockly.Mirai.ORDER_LOGICAL_AND], [Blockly.Mirai.ORDER_LOGICAL_OR, Blockly.Mirai.ORDER_LOGICAL_OR]];
  Blockly.Mirai.isInitialized = !1;
  Blockly.Mirai.init = function(a) {
    Object.getPrototypeOf(this).init.call(this);
    this.nameDB_ ? this.nameDB_.reset() : this.nameDB_ = new Blockly.Names(this.RESERVED_WORDS_);
    this.nameDB_.setVariableMap(a.getVariableMap());
    this.nameDB_.populateVariables(a);
    this.nameDB_.populateProcedures(a);
    for (var b = [], c = Blockly.Variables.allDeveloperVariables(a), d = 0; d < c.length; d++) b.push(this.nameDB_.getName(c[d], Blockly.Names.DEVELOPER_VARIABLE_TYPE));
    a = Blockly.Variables.allUsedVarModels(a);
    for (d = 0; d < a.length; d++) b.push(this.nameDB_.getName(a[d].getId(), Blockly.VARIABLE_CATEGORY_NAME));
    // 生成代码 - 初始化字段
    b.length && (this.definitions_.variables = "Object " + b.join(", ") + ";");
    this.isInitialized = !0
  };
  Blockly.Mirai.finish = function(a) {
    var b = Blockly.utils.object.values(this.definitions_);
    a = Object.getPrototypeOf(this).finish.call(this, a);
    this.isInitialized = !1;
    this.nameDB_.reset();
    return b.join("\n\n") + "\n\n\n" + a + "\n}";
  };
  Blockly.Mirai.scrubNakedValue = function(a) {
    return a + ";\n"
  };
  Blockly.Mirai.quote_ = function(a) {
    a = a.replace(/\\/g, "\\\\").replace(/\n/g, "\\\n").replace(/"/g, "\\\"");
    return '"' + a + '"'
  };
  Blockly.Mirai.multiline_quote_ = function(a) {
    return a.split(/\n/g).map(this.quote_).join(' + "\\n" +\n')
  };
  Blockly.Mirai.scrub_ = function(a, b, c) {
    var d = "";
    if (!a.outputConnection || !a.outputConnection.targetConnection) {
      var e = a.getCommentText();
      e && (e = Blockly.utils.string.wrap(e, this.COMMENT_WRAP - 3), d += this.prefixLines(e + "\n", "// "));
      for (var f = 0; f < a.inputList.length; f++) a.inputList[f].type == Blockly.inputTypes.VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = this.allNestedComments(e)) && (d += this.prefixLines(e, "// "))
    }
    a = a.nextConnection && a.nextConnection.targetBlock();
    c = c ? "": this.blockToCode(a);
    return d + b + c
  };
  Blockly.Mirai.getAdjusted = function(a, b, c, d, e) {
    c = c || 0;
    e = e || this.ORDER_NONE;
    a.workspace.options.oneBasedIndex && c--;
    var f = a.workspace.options.oneBasedIndex ? "1": "0";
    a = 0 < c ? this.valueToCode(a, b, this.ORDER_ADDITION) || f: 0 > c ? this.valueToCode(a, b, this.ORDER_SUBTRACTION) || f: d ? this.valueToCode(a, b, this.ORDER_UNARY_NEGATION) || f: this.valueToCode(a, b, e) || f;
    if (Blockly.isNumber(a)) a = Number(a) + c,
    d && (a = -a);
    else {
      if (0 < c) {
        a = a + " + " + c;
        var g = this.ORDER_ADDITION
      } else 0 > c && (a = a + " - " + -c, g = this.ORDER_SUBTRACTION);
      d && (a = c ? "-(" + a + ")": "-" + a, g = this.ORDER_UNARY_NEGATION);
      g = Math.floor(g);
      e = Math.floor(e);
      g && e >= g && (a = "(" + a + ")")
    }
    return a
  };
  Blockly.Mirai.colour = {};
  Blockly.Mirai.colour_picker = function(a) {
    return [Blockly.Mirai.quote_(a.getFieldValue("COLOUR")), Blockly.Mirai.ORDER_ATOMIC]
  };
  Blockly.Mirai.colour_random = function(a) {
    return [Blockly.Mirai.provideFunction_("colourRandom", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "() {", "  var num = Math.floor(Math.random() * Math.pow(2, 24));", "  return \"#\" + ('00000' + num.toString(16)).substr(-6);", "}"]) + "()", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.colour_rgb = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "RED", Blockly.Mirai.ORDER_NONE) || 0,
    c = Blockly.Mirai.valueToCode(a, "GREEN", Blockly.Mirai.ORDER_NONE) || 0;
    a = Blockly.Mirai.valueToCode(a, "BLUE", Blockly.Mirai.ORDER_NONE) || 0;
    return [Blockly.Mirai.provideFunction_("colourRgb", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(r, g, b) {", "  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;", "  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;", "  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;", "  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);", "  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);", "  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);", "  return '#' + r + g + b;", "}"]) + "(" + b + ", " + c + ", " + a + ")", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.colour_blend = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "COLOUR1", Blockly.Mirai.ORDER_NONE) || "'#000000'",
    c = Blockly.Mirai.valueToCode(a, "COLOUR2", Blockly.Mirai.ORDER_NONE) || "'#000000'";
    a = Blockly.Mirai.valueToCode(a, "RATIO", Blockly.Mirai.ORDER_NONE) || .5;
    return [Blockly.Mirai.provideFunction_("colourBlend", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(c1, c2, ratio) {", "  ratio = Math.max(Math.min(Number(ratio), 1), 0);", "  var r1 = parseInt(c1.substring(1, 3), 16);", "  var g1 = parseInt(c1.substring(3, 5), 16);", "  var b1 = parseInt(c1.substring(5, 7), 16);", "  var r2 = parseInt(c2.substring(1, 3), 16);", "  var g2 = parseInt(c2.substring(3, 5), 16);", "  var b2 = parseInt(c2.substring(5, 7), 16);", "  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);", "  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);", "  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);", "  r = ('0' + (r || 0).toString(16)).slice(-2);", "  g = ('0' + (g || 0).toString(16)).slice(-2);", "  b = ('0' + (b || 0).toString(16)).slice(-2);", "  return '#' + r + g + b;", "}"]) + "(" + b + ", " + c + ", " + a + ")", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.lists = {};
  Blockly.Mirai.lists_create_empty = function(a) {
    return ["[]", Blockly.Mirai.ORDER_ATOMIC]
  };
  Blockly.Mirai.lists_create_with = function(a) {
    for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = Blockly.Mirai.valueToCode(a, "ADD" + c, Blockly.Mirai.ORDER_NONE) || "null";
    return ["[" + b.join(", ") + "]", Blockly.Mirai.ORDER_ATOMIC]
  };
  Blockly.Mirai.lists_repeat = function(a) {
    var b = Blockly.Mirai.provideFunction_("listsRepeat", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(value, n) {", "  var array = [];", "  for (var i = 0; i < n; i++) {", "    array[i] = value;", "  }", "  return array;", "}"]),
    c = Blockly.Mirai.valueToCode(a, "ITEM", Blockly.Mirai.ORDER_NONE) || "null";
    a = Blockly.Mirai.valueToCode(a, "NUM", Blockly.Mirai.ORDER_NONE) || "0";
    return [b + "(" + c + ", " + a + ")", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.lists_length = function(a) {
    return [(Blockly.Mirai.valueToCode(a, "VALUE", Blockly.Mirai.ORDER_MEMBER) || "[]") + ".length", Blockly.Mirai.ORDER_MEMBER]
  };
  Blockly.Mirai.lists_isEmpty = function(a) {
    return ["!" + (Blockly.Mirai.valueToCode(a, "VALUE", Blockly.Mirai.ORDER_MEMBER) || "[]") + ".length", Blockly.Mirai.ORDER_LOGICAL_NOT]
  };
  Blockly.Mirai.lists_indexOf = function(a) {
    var b = "FIRST" == a.getFieldValue("END") ? "indexOf": "lastIndexOf",
    c = Blockly.Mirai.valueToCode(a, "FIND", Blockly.Mirai.ORDER_NONE) || '""';
    b = (Blockly.Mirai.valueToCode(a, "VALUE", Blockly.Mirai.ORDER_MEMBER) || "[]") + "." + b + "(" + c + ")";
    return a.workspace.options.oneBasedIndex ? [b + " + 1", Blockly.Mirai.ORDER_ADDITION] : [b, Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.lists_getIndex = function(a) {
    var b = a.getFieldValue("MODE") || "GET",
    c = a.getFieldValue("WHERE") || "FROM_START",
    d = Blockly.Mirai.valueToCode(a, "VALUE", "RANDOM" == c ? Blockly.Mirai.ORDER_NONE: Blockly.Mirai.ORDER_MEMBER) || "[]";
    switch (c) {
    case "FIRST":
      if ("GET" == b) return [d + "[0]", Blockly.Mirai.ORDER_MEMBER];
      if ("GET_REMOVE" == b) return [d + ".shift()", Blockly.Mirai.ORDER_MEMBER];
      if ("REMOVE" == b) return d + ".shift();\n";
      break;
    case "LAST":
      if ("GET" == b) return [d + ".slice(-1)[0]", Blockly.Mirai.ORDER_MEMBER];
      if ("GET_REMOVE" == b) return [d + ".pop()", Blockly.Mirai.ORDER_MEMBER];
      if ("REMOVE" == b) return d + ".pop();\n";
      break;
    case "FROM_START":
      a = Blockly.Mirai.getAdjusted(a, "AT");
      if ("GET" == b) return [d + "[" + a + "]", Blockly.Mirai.ORDER_MEMBER];
      if ("GET_REMOVE" == b) return [d + ".splice(" + a + ", 1)[0]", Blockly.Mirai.ORDER_FUNCTION_CALL];
      if ("REMOVE" == b) return d + ".splice(" + a + ", 1);\n";
      break;
    case "FROM_END":
      a = Blockly.Mirai.getAdjusted(a, "AT", 1, !0);
      if ("GET" == b) return [d + ".slice(" + a + ")[0]", Blockly.Mirai.ORDER_FUNCTION_CALL];
      if ("GET_REMOVE" == b) return [d + ".splice(" + a + ", 1)[0]", Blockly.Mirai.ORDER_FUNCTION_CALL];
      if ("REMOVE" == b) return d + ".splice(" + a + ", 1);";
      break;
    case "RANDOM":
      d = Blockly.Mirai.provideFunction_("listsGetRandomItem", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(list, remove) {", "  var x = Math.floor(Math.random() * list.length);", "  if (remove) {", "    return list.splice(x, 1)[0];", "  } else {", "    return list[x];", "  }", "}"]) + "(" + d + ", " + ("GET" != b) + ")";
      if ("GET" == b || "GET_REMOVE" == b) return [d, Blockly.Mirai.ORDER_FUNCTION_CALL];
      if ("REMOVE" == b) return d + ";\n"
    }
    throw Error("Unhandled combination (lists_getIndex).");
  };
  Blockly.Mirai.lists_setIndex = function(a) {
    function b() {
      if (c.match(/^\w+$/)) return "";
      var g = Blockly.Mirai.nameDB_.getDistinctName("tmpList", Blockly.VARIABLE_CATEGORY_NAME),
      h = "var " + g + " = " + c + ";\n";
      c = g;
      return h
    }
    var c = Blockly.Mirai.valueToCode(a, "LIST", Blockly.Mirai.ORDER_MEMBER) || "[]",
    d = a.getFieldValue("MODE") || "GET",
    e = a.getFieldValue("WHERE") || "FROM_START",
    f = Blockly.Mirai.valueToCode(a, "TO", Blockly.Mirai.ORDER_ASSIGNMENT) || "null";
    switch (e) {
    case "FIRST":
      if ("SET" == d) return c + "[0] = " + f + ";\n";
      if ("INSERT" == d) return c + ".unshift(" + f + ");\n";
      break;
    case "LAST":
      if ("SET" == d) return a = b(),
      a + (c + "[" + c + ".length - 1] = " + f + ";\n");
      if ("INSERT" == d) return c + ".push(" + f + ");\n";
      break;
    case "FROM_START":
      e = Blockly.Mirai.getAdjusted(a, "AT");
      if ("SET" == d) return c + "[" + e + "] = " + f + ";\n";
      if ("INSERT" == d) return c + ".splice(" + e + ", 0, " + f + ");\n";
      break;
    case "FROM_END":
      e = Blockly.Mirai.getAdjusted(a, "AT", 1, !1, Blockly.Mirai.ORDER_SUBTRACTION);
      a = b();
      if ("SET" == d) return a + (c + "[" + c + ".length - " + e + "] = " + f + ";\n");
      if ("INSERT" == d) return a + (c + ".splice(" + c + ".length - " + e + ", 0, " + f + ");\n");
      break;
    case "RANDOM":
      a = b();
      e = Blockly.Mirai.nameDB_.getDistinctName("tmpX", Blockly.VARIABLE_CATEGORY_NAME);
      a += "var " + e + " = Math.floor(Math.random() * " + c + ".length);\n";
      if ("SET" == d) return a + (c + "[" + e + "] = " + f + ";\n");
      if ("INSERT" == d) return a + (c + ".splice(" + e + ", 0, " + f + ");\n")
    }
    throw Error("Unhandled combination (lists_setIndex).");
  };
  Blockly.Mirai.lists.getIndex_ = function(a, b, c) {
    return "FIRST" == b ? "0": "FROM_END" == b ? a + ".length - 1 - " + c: "LAST" == b ? a + ".length - 1": c
  };
  Blockly.Mirai.lists_getSublist = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "LIST", Blockly.Mirai.ORDER_MEMBER) || "[]",
    c = a.getFieldValue("WHERE1"),
    d = a.getFieldValue("WHERE2");
    if ("FIRST" == c && "LAST" == d) b += ".slice(0)";
    else if (b.match(/^\w+$/) || "FROM_END" != c && "FROM_START" == d) {
      switch (c) {
      case "FROM_START":
        var e = Blockly.Mirai.getAdjusted(a, "AT1");
        break;
      case "FROM_END":
        e = Blockly.Mirai.getAdjusted(a, "AT1", 1, !1, Blockly.Mirai.ORDER_SUBTRACTION);
        e = b + ".length - " + e;
        break;
      case "FIRST":
        e = "0";
        break;
      default:
        throw Error("Unhandled option (lists_getSublist).");
      }
      switch (d) {
      case "FROM_START":
        a = Blockly.Mirai.getAdjusted(a, "AT2", 1);
        break;
      case "FROM_END":
        a = Blockly.Mirai.getAdjusted(a, "AT2", 0, !1, Blockly.Mirai.ORDER_SUBTRACTION);
        a = b + ".length - " + a;
        break;
      case "LAST":
        a = b + ".length";
        break;
      default:
        throw Error("Unhandled option (lists_getSublist).");
      }
      b = b + ".slice(" + e + ", " + a + ")"
    } else {
      e = Blockly.Mirai.getAdjusted(a, "AT1");
      a = Blockly.Mirai.getAdjusted(a, "AT2");
      var f = Blockly.Mirai.lists.getIndex_,
      g = {
        FIRST: "First",
        LAST: "Last",
        FROM_START: "FromStart",
        FROM_END: "FromEnd"
      };
      b = Blockly.Mirai.provideFunction_("subsequence" + g[c] + g[d], ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(sequence" + ("FROM_END" == c || "FROM_START" == c ? ", at1": "") + ("FROM_END" == d || "FROM_START" == d ? ", at2": "") + ") {", "  var start = " + f("sequence", c, "at1") + ";", "  var end = " + f("sequence", d, "at2") + " + 1;", "  return sequence.slice(start, end);", "}"]) + "(" + b + ("FROM_END" == c || "FROM_START" == c ? ", " + e: "") + ("FROM_END" == d || "FROM_START" == d ? ", " + a: "") + ")"
    }
    return [b, Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.lists_sort = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "LIST", Blockly.Mirai.ORDER_FUNCTION_CALL) || "[]",
    c = "1" === a.getFieldValue("DIRECTION") ? 1 : -1;
    a = a.getFieldValue("TYPE");
    var d = Blockly.Mirai.provideFunction_("listsGetSortCompare", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(type, direction) {", "  var compareFuncs = {", '    "NUMERIC": function(a, b) {', "        return Number(a) - Number(b); },", '    "TEXT": function(a, b) {', "        return a.toString() > b.toString() ? 1 : -1; },", '    "IGNORE_CASE": function(a, b) {', "        return a.toString().toLowerCase() > b.toString().toLowerCase() ? 1 : -1; },", "  };", "  var compare = compareFuncs[type];", "  return function(a, b) { return compare(a, b) * direction; }", "}"]);
    return [b + ".slice().sort(" + d + '("' + a + '", ' + c + "))", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.lists_split = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "INPUT", Blockly.Mirai.ORDER_MEMBER),
    c = Blockly.Mirai.valueToCode(a, "DELIM", Blockly.Mirai.ORDER_NONE) || '""';
    a = a.getFieldValue("MODE");
    if ("SPLIT" == a) b || (b = '""'),
    a = "split";
    else if ("JOIN" == a) b || (b = "[]"),
    a = "join";
    else throw Error("Unknown mode: " + a);
    return [b + "." + a + "(" + c + ")", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.lists_reverse = function(a) {
    return [(Blockly.Mirai.valueToCode(a, "LIST", Blockly.Mirai.ORDER_FUNCTION_CALL) || "[]") + ".slice().reverse()", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.logic = {};
  Blockly.Mirai.controls_if = function(a) {
    var b = 0,
    c = "";
    Blockly.Mirai.STATEMENT_PREFIX && (c += Blockly.Mirai.injectId(Blockly.Mirai.STATEMENT_PREFIX, a));
    do {
      var d = Blockly.Mirai.valueToCode(a, "IF" + b, Blockly.Mirai.ORDER_NONE) || "false";
      var e = Blockly.Mirai.statementToCode(a, "DO" + b);
      Blockly.Mirai.STATEMENT_SUFFIX && (e = Blockly.Mirai.prefixLines(Blockly.Mirai.injectId(Blockly.Mirai.STATEMENT_SUFFIX, a), Blockly.Mirai.INDENT) + e);
      c += (0 < b ? " else ": "") + "if (" + d + ") {\n" + e + "}"; ++b
    } while ( a . getInput ("IF" + b ));
    if (a.getInput("ELSE") || Blockly.Mirai.STATEMENT_SUFFIX) e = Blockly.Mirai.statementToCode(a, "ELSE"),
    Blockly.Mirai.STATEMENT_SUFFIX && (e = Blockly.Mirai.prefixLines(Blockly.Mirai.injectId(Blockly.Mirai.STATEMENT_SUFFIX, a), Blockly.Mirai.INDENT) + e),
    c += " else {\n" + e + "}";
    return c + "\n"
  };
  Blockly.Mirai.controls_ifelse = Blockly.Mirai.controls_if;
  Blockly.Mirai.logic_compare = function(a) {
    var b = {
      EQ: "==",
      NEQ: "!=",
      LT: "<",
      LTE: "<=",
      GT: ">",
      GTE: ">="
    } [a.getFieldValue("OP")],
    c = "==" == b || "!=" == b ? Blockly.Mirai.ORDER_EQUALITY: Blockly.Mirai.ORDER_RELATIONAL,
    d = Blockly.Mirai.valueToCode(a, "A", c) || "0";
    a = Blockly.Mirai.valueToCode(a, "B", c) || "0";
    return [d + " " + b + " " + a, c]
  };
  Blockly.Mirai.logic_operation = function(a) {
    var b = "AND" == a.getFieldValue("OP") ? "&&": "||",
    c = "&&" == b ? Blockly.Mirai.ORDER_LOGICAL_AND: Blockly.Mirai.ORDER_LOGICAL_OR,
    d = Blockly.Mirai.valueToCode(a, "A", c);
    a = Blockly.Mirai.valueToCode(a, "B", c);
    if (d || a) {
      var e = "&&" == b ? "true": "false";
      d || (d = e);
      a || (a = e)
    } else a = d = "false";
    return [d + " " + b + " " + a, c]
  };
  Blockly.Mirai.logic_negate = function(a) {
    var b = Blockly.Mirai.ORDER_LOGICAL_NOT;
    return ["!" + (Blockly.Mirai.valueToCode(a, "BOOL", b) || "true"), b]
  };
  Blockly.Mirai.logic_boolean = function(a) {
    return ["TRUE" == a.getFieldValue("BOOL") ? "true": "false", Blockly.Mirai.ORDER_ATOMIC]
  };
  Blockly.Mirai.logic_null = function(a) {
    return ["null", Blockly.Mirai.ORDER_ATOMIC]
  };
  Blockly.Mirai.logic_ternary = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "IF", Blockly.Mirai.ORDER_CONDITIONAL) || "false",
    c = Blockly.Mirai.valueToCode(a, "THEN", Blockly.Mirai.ORDER_CONDITIONAL) || "null";
    a = Blockly.Mirai.valueToCode(a, "ELSE", Blockly.Mirai.ORDER_CONDITIONAL) || "null";
    return [b + " ? " + c + " : " + a, Blockly.Mirai.ORDER_CONDITIONAL]
  };
  Blockly.Mirai.loops = {};
  Blockly.Mirai.controls_repeat_ext = function(a) {
    var b = a.getField("TIMES") ? String(Number(a.getFieldValue("TIMES"))) : Blockly.Mirai.valueToCode(a, "TIMES", Blockly.Mirai.ORDER_ASSIGNMENT) || "0",
    c = Blockly.Mirai.statementToCode(a, "DO");
    c = Blockly.Mirai.addLoopTrap(c, a);
    a = "";
    var d = Blockly.Mirai.nameDB_.getDistinctName("count", Blockly.VARIABLE_CATEGORY_NAME),
    e = b;
    b.match(/^\w+$/) || Blockly.isNumber(b) || (e = Blockly.Mirai.nameDB_.getDistinctName("repeat_end", Blockly.VARIABLE_CATEGORY_NAME), a += "var " + e + " = " + b + ";\n");
    return a + ("for (var " + d + " = 0; " + d + " < " + e + "; " + d + "++) {\n" + c + "}\n")
  };
  Blockly.Mirai.controls_repeat = Blockly.Mirai.controls_repeat_ext;
  Blockly.Mirai.controls_whileUntil = function(a) {
    var b = "UNTIL" == a.getFieldValue("MODE"),
    c = Blockly.Mirai.valueToCode(a, "BOOL", b ? Blockly.Mirai.ORDER_LOGICAL_NOT: Blockly.Mirai.ORDER_NONE) || "false",
    d = Blockly.Mirai.statementToCode(a, "DO");
    d = Blockly.Mirai.addLoopTrap(d, a);
    b && (c = "!" + c);
    return "while (" + c + ") {\n" + d + "}\n"
  };
  Blockly.Mirai.controls_for = function(a) {
    var b = Blockly.Mirai.nameDB_.getName(a.getFieldValue("VAR"), Blockly.VARIABLE_CATEGORY_NAME),
    c = Blockly.Mirai.valueToCode(a, "FROM", Blockly.Mirai.ORDER_ASSIGNMENT) || "0",
    d = Blockly.Mirai.valueToCode(a, "TO", Blockly.Mirai.ORDER_ASSIGNMENT) || "0",
    e = Blockly.Mirai.valueToCode(a, "BY", Blockly.Mirai.ORDER_ASSIGNMENT) || "1",
    f = Blockly.Mirai.statementToCode(a, "DO");
    f = Blockly.Mirai.addLoopTrap(f, a);
    if (Blockly.isNumber(c) && Blockly.isNumber(d) && Blockly.isNumber(e)) {
      var g = Number(c) <= Number(d);
      a = "for (" + b + " = " + c + "; " + b + (g ? " <= ": " >= ") + d + "; " + b;
      b = Math.abs(Number(e));
      a = (1 == b ? a + (g ? "++": "--") : a + ((g ? " += ": " -= ") + b)) + (") {\n" + f + "}\n")
    } else a = "",
    g = c,
    c.match(/^\w+$/) || Blockly.isNumber(c) || (g = Blockly.Mirai.nameDB_.getDistinctName(b + "_start", Blockly.VARIABLE_CATEGORY_NAME), a += "var " + g + " = " + c + ";\n"),
    c = d,
    d.match(/^\w+$/) || Blockly.isNumber(d) || (c = Blockly.Mirai.nameDB_.getDistinctName(b + "_end", Blockly.VARIABLE_CATEGORY_NAME), a += "var " + c + " = " + d + ";\n"),
    d = Blockly.Mirai.nameDB_.getDistinctName(b + "_inc", Blockly.VARIABLE_CATEGORY_NAME),
    a += "var " + d + " = ",
    a = Blockly.isNumber(e) ? a + (Math.abs(e) + ";\n") : a + ("Math.abs(" + e + ");\n"),
    a = a + ("if (" + g + " > " + c + ") {\n") + (Blockly.Mirai.INDENT + d + " = -" + d + ";\n"),
    a += "}\n",
    a += "for (" + b + " = " + g + "; " + d + " >= 0 ? " + b + " <= " + c + " : " + b + " >= " + c + "; " + b + " += " + d + ") {\n" + f + "}\n";
    return a
  };
  Blockly.Mirai.controls_forEach = function(a) {
    var b = Blockly.Mirai.nameDB_.getName(a.getFieldValue("VAR"), Blockly.VARIABLE_CATEGORY_NAME),
    c = Blockly.Mirai.valueToCode(a, "LIST", Blockly.Mirai.ORDER_ASSIGNMENT) || "[]",
    d = Blockly.Mirai.statementToCode(a, "DO");
    d = Blockly.Mirai.addLoopTrap(d, a);
    a = "";
    var e = c;
    c.match(/^\w+$/) || (e = Blockly.Mirai.nameDB_.getDistinctName(b + "_list", Blockly.VARIABLE_CATEGORY_NAME), a += "var " + e + " = " + c + ";\n");
    c = Blockly.Mirai.nameDB_.getDistinctName(b + "_index", Blockly.VARIABLE_CATEGORY_NAME);
    d = Blockly.Mirai.INDENT + b + " = " + e + "[" + c + "];\n" + d;
    return a + ("for (var " + c + " in " + e + ") {\n" + d + "}\n")
  };
  Blockly.Mirai.controls_flow_statements = function(a) {
    var b = "";
    Blockly.Mirai.STATEMENT_PREFIX && (b += Blockly.Mirai.injectId(Blockly.Mirai.STATEMENT_PREFIX, a));
    Blockly.Mirai.STATEMENT_SUFFIX && (b += Blockly.Mirai.injectId(Blockly.Mirai.STATEMENT_SUFFIX, a));
    if (Blockly.Mirai.STATEMENT_PREFIX) {
      var c = Blockly.Constants.Loops.CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(a);
      c && !c.suppressPrefixSuffix && (b += Blockly.Mirai.injectId(Blockly.Mirai.STATEMENT_PREFIX, c))
    }
    switch (a.getFieldValue("FLOW")) {
    case "BREAK":
      return b + "break;\n";
    case "CONTINUE":
      return b + "continue;\n"
    }
    throw Error("Unknown flow statement.");
  };
  Blockly.Mirai.math = {};
  Blockly.Mirai.math_number = function(a) {
    a = Number(a.getFieldValue("NUM"));
    return [a, 0 <= a ? Blockly.Mirai.ORDER_ATOMIC: Blockly.Mirai.ORDER_UNARY_NEGATION]
  };
  Blockly.Mirai.math_arithmetic = function(a) {
    var b = {
      ADD: [" + ", Blockly.Mirai.ORDER_ADDITION],
      MINUS: [" - ", Blockly.Mirai.ORDER_SUBTRACTION],
      MULTIPLY: [" * ", Blockly.Mirai.ORDER_MULTIPLICATION],
      DIVIDE: [" / ", Blockly.Mirai.ORDER_DIVISION],
      POWER: [null, Blockly.Mirai.ORDER_NONE]
    } [a.getFieldValue("OP")],
    c = b[0];
    b = b[1];
    var d = Blockly.Mirai.valueToCode(a, "A", b) || "0";
    a = Blockly.Mirai.valueToCode(a, "B", b) || "0";
    return c ? [d + c + a, b] : ["Math.pow(" + d + ", " + a + ")", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.math_single = function(a) {
    var b = a.getFieldValue("OP");
    if ("NEG" == b) return a = Blockly.Mirai.valueToCode(a, "NUM", Blockly.Mirai.ORDER_UNARY_NEGATION) || "0",
    "-" == a[0] && (a = " " + a),
    ["-" + a, Blockly.Mirai.ORDER_UNARY_NEGATION];
    a = "SIN" == b || "COS" == b || "TAN" == b ? Blockly.Mirai.valueToCode(a, "NUM", Blockly.Mirai.ORDER_DIVISION) || "0": Blockly.Mirai.valueToCode(a, "NUM", Blockly.Mirai.ORDER_NONE) || "0";
    switch (b) {
    case "ABS":
      var c = "Math.abs(" + a + ")";
      break;
    case "ROOT":
      c = "Math.sqrt(" + a + ")";
      break;
    case "LN":
      c = "Math.log(" + a + ")";
      break;
    case "EXP":
      c = "Math.exp(" + a + ")";
      break;
    case "POW10":
      c = "Math.pow(10," + a + ")";
      break;
    case "ROUND":
      c = "Math.round(" + a + ")";
      break;
    case "ROUNDUP":
      c = "Math.ceil(" + a + ")";
      break;
    case "ROUNDDOWN":
      c = "Math.floor(" + a + ")";
      break;
    case "SIN":
      c = "Math.sin(" + a + " / 180 * Math.PI)";
      break;
    case "COS":
      c = "Math.cos(" + a + " / 180 * Math.PI)";
      break;
    case "TAN":
      c = "Math.tan(" + a + " / 180 * Math.PI)"
    }
    if (c) return [c, Blockly.Mirai.ORDER_FUNCTION_CALL];
    switch (b) {
    case "LOG10":
      c = "Math.log(" + a + ") / Math.log(10)";
      break;
    case "ASIN":
      c = "Math.asin(" + a + ") / Math.PI * 180";
      break;
    case "ACOS":
      c = "Math.acos(" + a + ") / Math.PI * 180";
      break;
    case "ATAN":
      c = "Math.atan(" + a + ") / Math.PI * 180";
      break;
    default:
      throw Error("Unknown math operator: " + b);
    }
    return [c, Blockly.Mirai.ORDER_DIVISION]
  };
  Blockly.Mirai.math_constant = function(a) {
    return {
      PI: ["Math.PI", Blockly.Mirai.ORDER_MEMBER],
      E: ["Math.E", Blockly.Mirai.ORDER_MEMBER],
      GOLDEN_RATIO: ["(1 + Math.sqrt(5)) / 2", Blockly.Mirai.ORDER_DIVISION],
      SQRT2: ["Math.SQRT2", Blockly.Mirai.ORDER_MEMBER],
      SQRT1_2: ["Math.SQRT1_2", Blockly.Mirai.ORDER_MEMBER],
      INFINITY: ["Infinity", Blockly.Mirai.ORDER_ATOMIC]
    } [a.getFieldValue("CONSTANT")]
  };
  Blockly.Mirai.math_number_property = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "NUMBER_TO_CHECK", Blockly.Mirai.ORDER_MODULUS) || "0",
    c = a.getFieldValue("PROPERTY");
    if ("PRIME" == c) return [Blockly.Mirai.provideFunction_("mathIsPrime", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(n) {", "  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods", "  if (n == 2 || n == 3) {", "    return true;", "  }", "  // False if n is NaN, negative, is 1, or not whole.", "  // And false if n is divisible by 2 or 3.", "  if (isNaN(n) || n <= 1 || n % 1 != 0 || n % 2 == 0 || n % 3 == 0) {", "    return false;", "  }", "  // Check all the numbers of form 6k +/- 1, up to sqrt(n).", "  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {", "    if (n % (x - 1) == 0 || n % (x + 1) == 0) {", "      return false;", "    }", "  }", "  return true;", "}"]) + "(" + b + ")", Blockly.Mirai.ORDER_FUNCTION_CALL];
    switch (c) {
    case "EVEN":
      var d = b + " % 2 == 0";
      break;
    case "ODD":
      d = b + " % 2 == 1";
      break;
    case "WHOLE":
      d = b + " % 1 == 0";
      break;
    case "POSITIVE":
      d = b + " > 0";
      break;
    case "NEGATIVE":
      d = b + " < 0";
      break;
    case "DIVISIBLE_BY":
      a = Blockly.Mirai.valueToCode(a, "DIVISOR", Blockly.Mirai.ORDER_MODULUS) || "0",
      d = b + " % " + a + " == 0"
    }
    return [d, Blockly.Mirai.ORDER_EQUALITY]
  };
  Blockly.Mirai.math_change = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "DELTA", Blockly.Mirai.ORDER_ADDITION) || "0";
    a = Blockly.Mirai.nameDB_.getName(a.getFieldValue("VAR"), Blockly.VARIABLE_CATEGORY_NAME);
    return a + " = (typeof " + a + " == 'number' ? " + a + " : 0) + " + b + ";\n"
  };
  Blockly.Mirai.math_round = Blockly.Mirai.math_single;
  Blockly.Mirai.math_trig = Blockly.Mirai.math_single;
  Blockly.Mirai.math_on_list = function(a) {
    var b = a.getFieldValue("OP");
    switch (b) {
    case "SUM":
      a = Blockly.Mirai.valueToCode(a, "LIST", Blockly.Mirai.ORDER_MEMBER) || "[]";
      a += ".reduce(function(x, y) {return x + y;})";
      break;
    case "MIN":
      a = Blockly.Mirai.valueToCode(a, "LIST", Blockly.Mirai.ORDER_NONE) || "[]";
      a = "Math.min.apply(null, " + a + ")";
      break;
    case "MAX":
      a = Blockly.Mirai.valueToCode(a, "LIST", Blockly.Mirai.ORDER_NONE) || "[]";
      a = "Math.max.apply(null, " + a + ")";
      break;
    case "AVERAGE":
      b = Blockly.Mirai.provideFunction_("mathMean", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(myList) {", "  return myList.reduce(function(x, y) {return x + y;}) / myList.length;", "}"]);
      a = Blockly.Mirai.valueToCode(a, "LIST", Blockly.Mirai.ORDER_NONE) || "[]";
      a = b + "(" + a + ")";
      break;
    case "MEDIAN":
      b = Blockly.Mirai.provideFunction_("mathMedian", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(myList) {", "  var localList = myList.filter(function (x) {return typeof x == 'number';});", "  if (!localList.length) return null;", "  localList.sort(function(a, b) {return b - a;});", "  if (localList.length % 2 == 0) {", "    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;", "  } else {", "    return localList[(localList.length - 1) / 2];", "  }", "}"]);
      a = Blockly.Mirai.valueToCode(a, "LIST", Blockly.Mirai.ORDER_NONE) || "[]";
      a = b + "(" + a + ")";
      break;
    case "MODE":
      b = Blockly.Mirai.provideFunction_("mathModes", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(values) {", "  var modes = [];", "  var counts = [];", "  var maxCount = 0;", "  for (var i = 0; i < values.length; i++) {", "    var value = values[i];", "    var found = false;", "    var thisCount;", "    for (var j = 0; j < counts.length; j++) {", "      if (counts[j][0] === value) {", "        thisCount = ++counts[j][1];", "        found = true;", "        break;", "      }", "    }", "    if (!found) {", "      counts.push([value, 1]);", "      thisCount = 1;", "    }", "    maxCount = Math.max(thisCount, maxCount);", "  }", "  for (var j = 0; j < counts.length; j++) {", "    if (counts[j][1] == maxCount) {", "        modes.push(counts[j][0]);", "    }", "  }", "  return modes;", "}"]);
      a = Blockly.Mirai.valueToCode(a, "LIST", Blockly.Mirai.ORDER_NONE) || "[]";
      a = b + "(" + a + ")";
      break;
    case "STD_DEV":
      b = Blockly.Mirai.provideFunction_("mathStandardDeviation", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(numbers) {", "  var n = numbers.length;", "  if (!n) return null;", "  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;", "  var variance = 0;", "  for (var j = 0; j < n; j++) {", "    variance += Math.pow(numbers[j] - mean, 2);", "  }", "  variance = variance / n;", "  return Math.sqrt(variance);", "}"]);
      a = Blockly.Mirai.valueToCode(a, "LIST", Blockly.Mirai.ORDER_NONE) || "[]";
      a = b + "(" + a + ")";
      break;
    case "RANDOM":
      b = Blockly.Mirai.provideFunction_("mathRandomList", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(list) {", "  var x = Math.floor(Math.random() * list.length);", "  return list[x];", "}"]);
      a = Blockly.Mirai.valueToCode(a, "LIST", Blockly.Mirai.ORDER_NONE) || "[]";
      a = b + "(" + a + ")";
      break;
    default:
      throw Error("Unknown operator: " + b);
    }
    return [a, Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.math_modulo = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "DIVIDEND", Blockly.Mirai.ORDER_MODULUS) || "0";
    a = Blockly.Mirai.valueToCode(a, "DIVISOR", Blockly.Mirai.ORDER_MODULUS) || "0";
    return [b + " % " + a, Blockly.Mirai.ORDER_MODULUS]
  };
  Blockly.Mirai.math_constrain = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "VALUE", Blockly.Mirai.ORDER_NONE) || "0",
    c = Blockly.Mirai.valueToCode(a, "LOW", Blockly.Mirai.ORDER_NONE) || "0";
    a = Blockly.Mirai.valueToCode(a, "HIGH", Blockly.Mirai.ORDER_NONE) || "Infinity";
    return ["Math.min(Math.max(" + b + ", " + c + "), " + a + ")", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.math_random_int = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "FROM", Blockly.Mirai.ORDER_NONE) || "0";
    a = Blockly.Mirai.valueToCode(a, "TO", Blockly.Mirai.ORDER_NONE) || "0";
    return [Blockly.Mirai.provideFunction_("mathRandomInt", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(a, b) {", "  if (a > b) {", "    // Swap a and b to ensure a is smaller.", "    var c = a;", "    a = b;", "    b = c;", "  }", "  return Math.floor(Math.random() * (b - a + 1) + a);", "}"]) + "(" + b + ", " + a + ")", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.math_random_float = function(a) {
    return ["Math.random()", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.math_atan2 = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "X", Blockly.Mirai.ORDER_NONE) || "0";
    return ["Math.atan2(" + (Blockly.Mirai.valueToCode(a, "Y", Blockly.Mirai.ORDER_NONE) || "0") + ", " + b + ") / Math.PI * 180", Blockly.Mirai.ORDER_DIVISION]
  };
  Blockly.Mirai.procedures = {};
  Blockly.Mirai.procedures_defreturn = function(a) {
    var b = Blockly.Mirai.nameDB_.getName(a.getFieldValue("NAME"), Blockly.PROCEDURE_CATEGORY_NAME),
    c = "";
    Blockly.Mirai.STATEMENT_PREFIX && (c += Blockly.Mirai.injectId(Blockly.Mirai.STATEMENT_PREFIX, a));
    Blockly.Mirai.STATEMENT_SUFFIX && (c += Blockly.Mirai.injectId(Blockly.Mirai.STATEMENT_SUFFIX, a));
    c && (c = Blockly.Mirai.prefixLines(c, Blockly.Mirai.INDENT));
    var d = "";
    Blockly.Mirai.INFINITE_LOOP_TRAP && (d = Blockly.Mirai.prefixLines(Blockly.Mirai.injectId(Blockly.Mirai.INFINITE_LOOP_TRAP, a), Blockly.Mirai.INDENT));
    var e = Blockly.Mirai.statementToCode(a, "STACK"),
    f = Blockly.Mirai.valueToCode(a, "RETURN", Blockly.Mirai.ORDER_NONE) || "",
    g = "";
    e && f && (g = c);
    f && (f = Blockly.Mirai.INDENT + "return " + f + ";\n");
    for (var h = [], l = a.getVars(), k = 0; k < l.length; k++) h[k] = "Object" + Blockly.Mirai.nameDB_.getName(l[k], Blockly.VARIABLE_CATEGORY_NAME);
    // 生成代码 - 函数/方法
    c = (f ? "Object": "void") + " " + b + "(" + h.join(", ") + ") {\n" + c + d + e + g + f + "}";
    c = Blockly.Mirai.scrub_(a, c);
    Blockly.Mirai.definitions_["%" + b] = c;
    return null
  };
  Blockly.Mirai.procedures_defnoreturn = Blockly.Mirai.procedures_defreturn;
  Blockly.Mirai.procedures_callreturn = function(a) {
    for (var b = Blockly.Mirai.nameDB_.getName(a.getFieldValue("NAME"), Blockly.PROCEDURE_CATEGORY_NAME), c = [], d = a.getVars(), e = 0; e < d.length; e++) c[e] = Blockly.Mirai.valueToCode(a, "ARG" + e, Blockly.Mirai.ORDER_NONE) || "null";
    return [b + "(" + c.join(", ") + ")", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.procedures_callnoreturn = function(a) {
    return Blockly.Mirai.procedures_callreturn(a)[0] + ";\n"
  };
  Blockly.Mirai.procedures_ifreturn = function(a) {
    var b = "if (" + (Blockly.Mirai.valueToCode(a, "CONDITION", Blockly.Mirai.ORDER_NONE) || "false") + ") {\n";
    Blockly.Mirai.STATEMENT_SUFFIX && (b += Blockly.Mirai.prefixLines(Blockly.Mirai.injectId(Blockly.Mirai.STATEMENT_SUFFIX, a), Blockly.Mirai.INDENT));
    a.hasReturnValue_ ? (a = Blockly.Mirai.valueToCode(a, "VALUE", Blockly.Mirai.ORDER_NONE) || "null", b += Blockly.Mirai.INDENT + "return " + a + ";\n") : b += Blockly.Mirai.INDENT + "return;\n";
    return b + "}\n"
  };
  Blockly.Mirai.texts = {};
  Blockly.Mirai.text = function(a) {
    return [Blockly.Mirai.quote_(a.getFieldValue("TEXT")), Blockly.Mirai.ORDER_ATOMIC]
  };
  Blockly.Mirai.text_multiline = function(a) {
    a = Blockly.Mirai.multiline_quote_(a.getFieldValue("TEXT"));
    var b = -1 != a.indexOf("+") ? Blockly.Mirai.ORDER_ADDITION: Blockly.Mirai.ORDER_ATOMIC;
    return [a, b]
  };
  Blockly.Mirai.text.forceString_ = function(a) {
    return Blockly.Mirai.text.forceString_.strRegExp.test(a) ? [a, Blockly.Mirai.ORDER_ATOMIC] : ["String(" + a + ")", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.text.forceString_.strRegExp = /^\s*'([^"]|\\")*'\s*$/;
  Blockly.Mirai.text_join = function(a) {
    switch (a.itemCount_) {
    case 0:
      return ['""', Blockly.Mirai.ORDER_ATOMIC];
    case 1:
      return a = Blockly.Mirai.valueToCode(a, "ADD0", Blockly.Mirai.ORDER_NONE) || '""',
      Blockly.Mirai.text.forceString_(a);
    case 2:
      var b = Blockly.Mirai.valueToCode(a, "ADD0", Blockly.Mirai.ORDER_NONE) || '""';
      a = Blockly.Mirai.valueToCode(a, "ADD1", Blockly.Mirai.ORDER_NONE) || '""';
      a = Blockly.Mirai.text.forceString_(b)[0] + " + " + Blockly.Mirai.text.forceString_(a)[0];
      return [a, Blockly.Mirai.ORDER_ADDITION];
    default:
      b = Array(a.itemCount_);
      for (var c = 0; c < a.itemCount_; c++) b[c] = Blockly.Mirai.valueToCode(a, "ADD" + c, Blockly.Mirai.ORDER_NONE) || '""';
      a = "[" + b.join(",") + '].join("")';
      return [a, Blockly.Mirai.ORDER_FUNCTION_CALL]
    }
  };
  Blockly.Mirai.text_append = function(a) {
    var b = Blockly.Mirai.nameDB_.getName(a.getFieldValue("VAR"), Blockly.VARIABLE_CATEGORY_NAME);
    a = Blockly.Mirai.valueToCode(a, "TEXT", Blockly.Mirai.ORDER_NONE) || '""';
    return b + " += " + Blockly.Mirai.text.forceString_(a)[0] + ";\n"
  };
  Blockly.Mirai.text_length = function(a) {
    return [(Blockly.Mirai.valueToCode(a, "VALUE", Blockly.Mirai.ORDER_MEMBER) || '""') + ".length", Blockly.Mirai.ORDER_MEMBER]
  };
  Blockly.Mirai.text_isEmpty = function(a) {
    return ["!" + (Blockly.Mirai.valueToCode(a, "VALUE", Blockly.Mirai.ORDER_MEMBER) || '""') + ".length", Blockly.Mirai.ORDER_LOGICAL_NOT]
  };
  Blockly.Mirai.text_indexOf = function(a) {
    var b = "FIRST" == a.getFieldValue("END") ? "indexOf": "lastIndexOf",
    c = Blockly.Mirai.valueToCode(a, "FIND", Blockly.Mirai.ORDER_NONE) || '""';
    b = (Blockly.Mirai.valueToCode(a, "VALUE", Blockly.Mirai.ORDER_MEMBER) || '""') + "." + b + "(" + c + ")";
    return a.workspace.options.oneBasedIndex ? [b + " + 1", Blockly.Mirai.ORDER_ADDITION] : [b, Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.text_charAt = function(a) {
    var b = a.getFieldValue("WHERE") || "FROM_START",
    c = Blockly.Mirai.valueToCode(a, "VALUE", "RANDOM" == b ? Blockly.Mirai.ORDER_NONE: Blockly.Mirai.ORDER_MEMBER) || '""';
    switch (b) {
    case "FIRST":
      return [c + ".charAt(0)", Blockly.Mirai.ORDER_FUNCTION_CALL];
    case "LAST":
      return [c + ".slice(-1)", Blockly.Mirai.ORDER_FUNCTION_CALL];
    case "FROM_START":
      return a = Blockly.Mirai.getAdjusted(a, "AT"),
      [c + ".charAt(" + a + ")", Blockly.Mirai.ORDER_FUNCTION_CALL];
    case "FROM_END":
      return a = Blockly.Mirai.getAdjusted(a, "AT", 1, !0),
      [c + ".slice(" + a + ").charAt(0)", Blockly.Mirai.ORDER_FUNCTION_CALL];
    case "RANDOM":
      return [Blockly.Mirai.provideFunction_("textRandomLetter", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(text) {", "  var x = Math.floor(Math.random() * text.length);", "  return text[x];", "}"]) + "(" + c + ")", Blockly.Mirai.ORDER_FUNCTION_CALL]
    }
    throw Error("Unhandled option (text_charAt).");
  };
  Blockly.Mirai.text.getIndex_ = function(a, b, c) {
    return "FIRST" == b ? "0": "FROM_END" == b ? a + ".length - 1 - " + c: "LAST" == b ? a + ".length - 1": c
  };
  Blockly.Mirai.text_getSubstring = function(a) {
    var b = a.getFieldValue("WHERE1"),
    c = a.getFieldValue("WHERE2"),
    d = "FROM_END" != b && "LAST" != b && "FROM_END" != c && "LAST" != c,
    e = Blockly.Mirai.valueToCode(a, "STRING", d ? Blockly.Mirai.ORDER_MEMBER: Blockly.Mirai.ORDER_NONE) || '""';
    if ("FIRST" == b && "LAST" == c) return [e, Blockly.Mirai.ORDER_NONE];
    if (e.match(/^'?\w+'?$/) || d) {
      switch (b) {
      case "FROM_START":
        d = Blockly.Mirai.getAdjusted(a, "AT1");
        break;
      case "FROM_END":
        d = Blockly.Mirai.getAdjusted(a, "AT1", 1, !1, Blockly.Mirai.ORDER_SUBTRACTION);
        d = e + ".length - " + d;
        break;
      case "FIRST":
        d = "0";
        break;
      default:
        throw Error("Unhandled option (text_getSubstring).");
      }
      switch (c) {
      case "FROM_START":
        a = Blockly.Mirai.getAdjusted(a, "AT2", 1);
        break;
      case "FROM_END":
        a = Blockly.Mirai.getAdjusted(a, "AT2", 0, !1, Blockly.Mirai.ORDER_SUBTRACTION);
        a = e + ".length - " + a;
        break;
      case "LAST":
        a = e + ".length";
        break;
      default:
        throw Error("Unhandled option (text_getSubstring).");
      }
      b = e + ".slice(" + d + ", " + a + ")"
    } else {
      d = Blockly.Mirai.getAdjusted(a, "AT1");
      a = Blockly.Mirai.getAdjusted(a, "AT2");
      var f = Blockly.Mirai.text.getIndex_,
      g = {
        FIRST: "First",
        LAST: "Last",
        FROM_START: "FromStart",
        FROM_END: "FromEnd"
      };
      b = Blockly.Mirai.provideFunction_("subsequence" + g[b] + g[c], ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(sequence" + ("FROM_END" == b || "FROM_START" == b ? ", at1": "") + ("FROM_END" == c || "FROM_START" == c ? ", at2": "") + ") {", "  var start = " + f("sequence", b, "at1") + ";", "  var end = " + f("sequence", c, "at2") + " + 1;", "  return sequence.slice(start, end);", "}"]) + "(" + e + ("FROM_END" == b || "FROM_START" == b ? ", " + d: "") + ("FROM_END" == c || "FROM_START" == c ? ", " + a: "") + ")"
    }
    return [b, Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.text_changeCase = function(a) {
    var b = {
      UPPERCASE: ".toUpperCase()",
      LOWERCASE: ".toLowerCase()",
      TITLECASE: null
    } [a.getFieldValue("CASE")];
    a = Blockly.Mirai.valueToCode(a, "TEXT", b ? Blockly.Mirai.ORDER_MEMBER: Blockly.Mirai.ORDER_NONE) || '""';
    return [b ? a + b: Blockly.Mirai.provideFunction_("textToTitleCase", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(str) {", "  return str.replace(/\\S+/g,", "      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});", "}"]) + "(" + a + ")", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.text_trim = function(a) {
    var b = {
      LEFT: ".replace(/^[\\s\\xa0]+/, '')",
      RIGHT: ".replace(/[\\s\\xa0]+$/, '')",
      BOTH: ".trim()"
    } [a.getFieldValue("MODE")];
    return [(Blockly.Mirai.valueToCode(a, "TEXT", Blockly.Mirai.ORDER_MEMBER) || '""') + b, Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.text_print = function(a) {
    return "window.alert(" + (Blockly.Mirai.valueToCode(a, "TEXT", Blockly.Mirai.ORDER_NONE) || '""') + ");\n"
  };
  Blockly.Mirai.text_prompt_ext = function(a) {
    var b = "window.prompt(" + (a.getField("TEXT") ? Blockly.Mirai.quote_(a.getFieldValue("TEXT")) : Blockly.Mirai.valueToCode(a, "TEXT", Blockly.Mirai.ORDER_NONE) || '""') + ")";
    "NUMBER" == a.getFieldValue("TYPE") && (b = "Number(" + b + ")");
    return [b, Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.text_prompt = Blockly.Mirai.text_prompt_ext;
  Blockly.Mirai.text_count = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "TEXT", Blockly.Mirai.ORDER_NONE) || '""';
    a = Blockly.Mirai.valueToCode(a, "SUB", Blockly.Mirai.ORDER_NONE) || '""';
    return [Blockly.Mirai.provideFunction_("textCount", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(haystack, needle) {", "  if (needle.length === 0) {", "    return haystack.length + 1;", "  } else {", "    return haystack.split(needle).length - 1;", "  }", "}"]) + "(" + b + ", " + a + ")", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.text_replace = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "TEXT", Blockly.Mirai.ORDER_NONE) || '""',
    c = Blockly.Mirai.valueToCode(a, "FROM", Blockly.Mirai.ORDER_NONE) || '""';
    a = Blockly.Mirai.valueToCode(a, "TO", Blockly.Mirai.ORDER_NONE) || '""';
    return [Blockly.Mirai.provideFunction_("textReplace", ["function " + Blockly.Mirai.FUNCTION_NAME_PLACEHOLDER_ + "(haystack, needle, replacement) {", '  needle = needle.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g,"\\\\$1")', '                 .replace(/\\x08/g,"\\\\x08");', "  return haystack.replace(new RegExp(needle, 'g'), replacement);", "}"]) + "(" + b + ", " + c + ", " + a + ")", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.text_reverse = function(a) {
    return [(Blockly.Mirai.valueToCode(a, "TEXT", Blockly.Mirai.ORDER_MEMBER) || '""') + ".split('').reverse().join('')", Blockly.Mirai.ORDER_FUNCTION_CALL]
  };
  Blockly.Mirai.variables = {};
  Blockly.Mirai.variables_get = function(a) {
    return [Blockly.Mirai.nameDB_.getName(a.getFieldValue("VAR"), Blockly.VARIABLE_CATEGORY_NAME), Blockly.Mirai.ORDER_ATOMIC]
  };
  Blockly.Mirai.variables_set = function(a) {
    var b = Blockly.Mirai.valueToCode(a, "VALUE", Blockly.Mirai.ORDER_ASSIGNMENT) || "0";
    return Blockly.Mirai.nameDB_.getName(a.getFieldValue("VAR"), Blockly.VARIABLE_CATEGORY_NAME) + " = " + b + ";\n"
  };
  // BlocklyMirai START
  Blockly.Mirai['getbot'] = function(block) {
    var value_qq = Blockly.Mirai.valueToCode(block, 'qq', Blockly.Mirai.ORDER_ATOMIC);
    var statements_content = Blockly.Mirai.statementToCode(block, 'content');

    return 'Bot.getInstance((Long)' + value_qq + ')' + (statements_content ? ('.' + statements_content) : '') + ';';
  };
  Blockly.Mirai['newbot'] = function(block) {
    var value_qq = Blockly.Mirai.valueToCode(block, 'qq', Blockly.Mirai.ORDER_ATOMIC);
    var value_password = Blockly.Mirai.valueToCode(block, 'password', Blockly.Mirai.ORDER_ATOMIC);
    var statements_content = Blockly.Mirai.statementToCode(block, 'content');
    var a = block.getInputTargetBlock('qq');
    return Blockly.Mirai.INDENT + 'BotFactory.INSTANCE.newBot(' + (a.type == 'math_number' ? '' : '(Long)') + value_qq + (a.type == 'math_number' ? 'L' : '') + ', ' + value_password + ', new BotConfiguration() {\n' + Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + '{\n' + statements_content + '\n' + Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + '}\n' + Blockly.Mirai.INDENT + '});';
  };
  Blockly.Mirai['loginprotocol'] = function(block) {
    var dropdown_protocol = block.getFieldValue('protocol');
    return Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + 'setProtocol(MiraiProtocol.' + dropdown_protocol + ');\n';
  };
  Blockly.Mirai['loginfilebaseddeviceinfo'] = function(block) {
    var value_path = Blockly.Mirai.valueToCode(block, 'path', Blockly.Mirai.ORDER_ATOMIC);
    return Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + 'fileBasedDeviceInfo(' + value_path + ');\n';
  };
  Blockly.Mirai['pluginmain'] = function(block) {
    var text_name = block.getFieldValue('name');
    var text_version = block.getFieldValue('version');
    var text_author = block.getFieldValue('author');
    var text_mainclass = block.getFieldValue('mainclass');
    var className = text_mainclass.substring(text_mainclass.lastIndexOf('.') + 1);
    var statements_args = Blockly.Mirai.statementToCode(block, 'args');

    return 'private static ' + className + ' instance;\n' + Blockly.Mirai.INDENT + 'public static ' + className + ' getInstance() {\n' + Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + 'return instance;\n' + Blockly.Mirai.INDENT + '}\n' + Blockly.Mirai.INDENT + 'public ' + className + '() {\n' + Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + 'super(new JvmPluginDescriptionBuilder(\n' + Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + '"' + text_mainclass + '",\n' + Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + '"' + text_version + '"\n' + Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + ')\n' + Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + '.name("' + text_name + '")\n' + Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + '.author("' + text_author + '")\n' + statements_args + Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + '.build());\n' + Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + 'instance = this;\n' + Blockly.Mirai.INDENT + '}';
  };
  Blockly.Mirai['onenable'] = function(block) {
    var statements_content = Blockly.Mirai.statementToCode(block, 'content');

    return '@Override\n' + Blockly.Mirai.INDENT + 'public void onEnable() {\n' + statements_content + '\n' + Blockly.Mirai.INDENT + Blockly.Mirai.INDENT + 'GlobalEventChannel.INSTANCE.registerListenerHost(this);\n' + Blockly.Mirai.INDENT + '}';
  };

  Blockly.Mirai['listen_event'] = function(block) {
    var name = block.getFieldValue('func_name')
    /*
	.replace(' ', '_').replace('+', '_')
	.replace('(', '_').replace(')', '_')
	.replace('{', '_').replace('}', '_')
	.replace('[', '_').replace(']', '_')
	.replace(',', '_').replace('.', '_')
  /* 算了，谁在方法名里打特殊符号让他死个🐴就好了，懒得检查 */
    ;
    var dropdown_priority = block.getFieldValue('priority');
    var dropdown_event = block.getFieldValue('event');
    var statements_content = Blockly.Mirai.statementToCode(block, 'content');

    return '@EventHandler(priority = EventPriority.' + dropdown_priority + ')\n' + Blockly.Mirai.INDENT + 'public void ' + name + '(' + dropdown_event + ' event) {\n' + Blockly.Mirai.INDENT + statements_content + '\n' + Blockly.Mirai.INDENT + '}';
  };
  
  Blockly.Mirai['event_getbot'] = function(block) {
    var value_content = Blockly.Mirai.valueToCode(block, 'content', Blockly.Mirai.ORDER_ATOMIC);
    return 'event.getBot()' + value_content;
  };
  Blockly.Mirai['event_getmessage'] = function(block) {
    var value_content = Blockly.Mirai.valueToCode(block, 'content', Blockly.Mirai.ORDER_ATOMIC);
    return 'event.getMessage()' + value_content;
  };
  Blockly.Mirai['event_getsender'] = function(block) {
    var value_content = Blockly.Mirai.valueToCode(block, 'content', Blockly.Mirai.ORDER_ATOMIC);
    return 'event.getSender()' + value_content;
  };
  Blockly.Mirai['event_getsource'] = function(block) {
    var value_content = Blockly.Mirai.valueToCode(block, 'content', Blockly.Mirai.ORDER_ATOMIC);
    return 'event.getSource()' + value_content;
  };
  Blockly.Mirai['event_getgroup'] = function(block) {
    var value_content = Blockly.Mirai.valueToCode(block, 'content', Blockly.Mirai.ORDER_ATOMIC);
    return 'event.getGroup()' + value_content;
  };
  Blockly.Mirai['event_getfriend'] = function(block) {
	  console.log(block);
    var value_content = Blockly.Mirai.valueToCode(block, 'content', Blockly.Mirai.ORDER_ATOMIC);
    return 'event.getFriend()' + value_content;
  };
Blockly.Mirai['contact_sendmessage'] = function(block) {
    var value_content = Blockly.Mirai.valueToCode(block, 'content', Blockly.Mirai.ORDER_ATOMIC);
  return ['.sendMessage(' + value_content + ');', Blockly.Mirai.ORDER_ATOMIC];
};
  // BlocklyMirai END
  // Java START
  Blockly.Mirai['java_code'] = function(block) {
    return block.getFieldValue('code') + '\n';
  };
  Blockly.Mirai['notes'] = function(block) {
    return '// ' + block.getFieldValue('notes') + '\n';
  };
  // Java END
  // 重写代码生成部分
  
  Blockly.Mirai.handleImports = function(block, importList){
      var imports = block['imports'];
      if (typeof(imports) != "undefined") {
        for (var i = 0,
        single_import; single_import = imports[i]; i++) {
          // 引用列表里没有时才导入
          if (importList.indexOf(single_import + ';') == -1) {
            importList = importList + 'import ' + single_import + ';\n';
          }
        }
      }
      // 遍历处理子块
      for(var i = 0,
      child; child = block.childBlocks_[i]; i++){
        importList = Blockly.Mirai.handleImports(child, importList);
      }
      return importList;
  };
  Blockly.Mirai.workspaceToCode = function(workspace) {
    workspace || (console.warn("No workspace specified in workspaceToCode call.  Guessing."), workspace = Blockly.getMainWorkspace());

    var plugin_constructor = workspace.getBlocksByType('pluginmain', !1)[0];
    // 必须要有“插件主类”积木块
    if (typeof(plugin_constructor) == "undefined") {
      return '/* 错误: 找不到插件主类构造器\n * 请在“载入/保存”处在第 2 行插入以下这行代码来添加构造器\n\n  <block type="pluginmain"></block>\n\n\n\n\n /* 请不要删除插件主类积木块 */';
    }
    var code = [];
    // 获取基础信息
    var text_mainclass = plugin_constructor.getFieldValue('mainclass');
    var packageName = text_mainclass.substring(0, text_mainclass.lastIndexOf('.'));
    var className = text_mainclass.substring(text_mainclass.lastIndexOf('.') + 1);
    var pluginName = plugin_constructor.getFieldValue('name');
    var pluginVersion = plugin_constructor.getFieldValue('version');
    var pluginAuthor = plugin_constructor.getFieldValue('author');
    // BlocklyMirai 声明，一般来说不推荐更改
    code.push('/**\n' + ' * [ Mirai Console Plugin ]\n' + ' * Name: ' + pluginName + '\n' + ' * Version: ' + pluginVersion + '\n' + ' * Author: ' + pluginAuthor + '\n' + ' * \n' + ' * Code generated by BlocklyMirai:\n' + ' * https://github.com/MrXiaoM/BlocklyMirai\n' + ' */\n')
    // 获取积木块中声明的引用并加入
    var importList = '';
    var blocks = workspace.getTopBlocks(!0);
    for (var i = 0,
    block; block = blocks[i]; i++) {
      importList = Blockly.Mirai.handleImports(block, importList);
    }
    code.push('package ' + packageName + ';\n' + '\n' + importList + '\n' + 'public class ' + className + ' extends JavaPlugin implements ListenerHost  {\n');
    this.init(workspace);
    for (var i = 0,
    block; block = blocks[i]; i++) {
      var c = this.blockToCode(block);
      Array.isArray(c) && (c = c[0]);
      c && (block.outputConnection && (c = this.scrubNakedValue(c), this.STATEMENT_PREFIX && !block.suppressPrefixSuffix && (c = this.injectId(this.STATEMENT_PREFIX, block) + c), this.STATEMENT_SUFFIX && !block.suppressPrefixSuffix && (c += this.injectId(this.STATEMENT_SUFFIX, block))), code.push(Blockly.Mirai.INDENT + c))
    }
    return this.finish(code.join("\n")).replace(/^\s+\n/, "").replace(/\n\s+$/, "\n").replace(/[ \t]+\n/g, "\n");
  };
  // 重写拖动积木块检查部分
  Blockly.ConnectionChecker.prototype.doDragChecks = function(blockClick, blockWait, distance) {
    if (blockClick.distanceFrom(blockWait) > distance) {
      return false;
    }
    // Don't consider insertion markers.
    if (blockWait.getSourceBlock().isInsertionMarker()) {
      return false;
    }
    // 避免事件被拖入不支持的块
    var allowOnEvents = blockClick.getSourceBlock().allowOnEvents;
    if (typeof(allowOnEvents) != "undefined") {
	  // 获取初代父积木块
	  var parentBlock = blockWait.getSourceBlock();
	  while (parentBlock.parentBlock_ != null){
		parentBlock = parentBlock.parentBlock_;
	  }
      if (parentBlock.type != "listen_event") return false;
      var dropdown_event = parentBlock.getFieldValue('event');
      var flag_allow = false;
      for (var j = 0, eventName; eventName = allowOnEvents[j]; j++) {
        if (eventName == dropdown_event) {
          flag_allow = true;
          break;
        }
      }
      if (!flag_allow) return false;
    }
    

    switch (blockWait.type) {
    case Blockly.connectionTypes.PREVIOUS_STATEMENT:
      return this.canConnectToPrevious_(blockClick, blockWait);
    case Blockly.connectionTypes.OUTPUT_VALUE:
      {
        // Don't offer to connect an already connected left (male) value plug to
        // an available right (female) value plug.
        if ((blockWait.isConnected() && !blockWait.targetBlock().isInsertionMarker()) || blockClick.isConnected()) {
          return false;
        }
        break;
      }
    case Blockly.connectionTypes.INPUT_VALUE:
      {
        // Offering to connect the left (male) of a value block to an already
        // connected value pair is ok, we'll splice it in.
        // However, don't offer to splice into an immovable block.
        if (blockWait.isConnected() && !blockWait.targetBlock().isMovable() && !blockWait.targetBlock().isShadow()) {
          return false;
        }
        break;
      }
    case Blockly.connectionTypes.NEXT_STATEMENT:
      {
        // Don't let a block with no next connection bump other blocks out of the
        // stack.  But covering up a shadow block or stack of shadow blocks is
        // fine.  Similarly, replacing a terminal statement with another terminal
        // statement is allowed.
        if (blockWait.isConnected() && !blockClick.getSourceBlock().nextConnection && !blockWait.targetBlock().isShadow() && blockWait.targetBlock().nextConnection) {
          return false;
        }
        break;
      }
    default:
      // Unexpected connection type.
      return false;
    }

    // Don't let blocks try to connect to themselves or ones they nest.
    if (Blockly.draggingConnections.indexOf(blockWait) != -1) {
      return false;
    }

    return true;
  };
  Blockly.Mirai.variablesDynamic = {};
  Blockly.Mirai.variables_get_dynamic = Blockly.Mirai.variables_get;
  Blockly.Mirai.variables_set_dynamic = Blockly.Mirai.variables_set;
  return Blockly.Mirai;
}));